{"Name":"Estimote SDK for Android","Id":2185,"Alias":"estimotesdkandroid","Description":"So, you’ve heard about contextual computing, microlocation, beacons, and all that fancy stuff, and now you’ve arrived here to get to the bottom of it all. Cool, because this is the place where you’ll learn how to build a context-aware app with Estimote Beacons and Estimote SDK.\n\n## What is a beacon?\n\nEstimote Beacon is a small computer. Its 32-bit ARM® Cortex M0 CPU is accompanied by accelerometer, temperature sensor, and what is most important—2.4 GHz radio using Bluetooth 4.0 Smart, also known as BLE or Bluetooth low energy.\n\nThe greatest advantage of Bluetooth Smart over the previous iterations of BT technology is how energy efficient it is. Thanks to that, and to a lot of work our engineers put into power management, Estimote Beacons can last more than 3 years on default settings on a single CR2477 battery.\n\nDon’t confuse Bluetooth Smart with the first version of Bluetooth: the one that required pairing and never actually worked. It’s a new standard developed by Nokia™, now implemented in all modern smartphones like Apple iPhone™ or Samsung™ Galaxy S. Other devices, ranging from Fitbit fitness trackers to the Apple Watch, use Bluetooth Smart too.\n\nBluetooth SIG maintains a list of Bluetooth Smart devices.\n\n## Signal range and measuring proximity\n\nYou can think about the beacon as a small lighthouse. But instead of light, it uses radio waves, and instead of ships, it alerts smartphones of its presence. Estimote Beacons have a range of up to 70 meters (230 feet). The signal, however, can be diffracted, interfered with, or absorbed by water (including the human body). That’s why in real world conditions you should expect range of about 40–50 meters.\n\n\n\nPhones or other smart devices can pick up the beacon’s signal and estimate the distance by measuring received signal strength (RSSI). The closer you are to the beacon, the stronger the signal. Remember that the beacon is not broadcasting continuously—it’s blinking instead. The more frequent the blinks, the more reliable the signal detection.\n\nAnd because Bluetooth Smart doesn’t require pairing, a phone can listen to many beacons at the same time. This unlocks more opportunities: for example indoor location.\n\nTo understand how all this impacts your beacon-enabled app, read our primer on physics behind beacons.\n\n## What is iBeacon, nearables, Indoor Location SDK?\n\nBeacon is only a piece of hardware broadcasting radio signal. On top of that, there are different APIs, SDKs, and protocols that you’ll be using to bring microlocation to your apps. No worries though, we’ll explain all of that!\n\n - [What is iBeacon?](http://developer.estimote.com/documentation/ibeacon/overview.html)\n - [What is an Estimote Sticker? What are nearables?](http://developer.estimote.com/documentation/nearables/overview.html)\n - [What is Estimote Indoor Location SDK?](http://developer.estimote.com/documentation/indoor/overview.html)\n\n\n\n# Estimote SDK for Android\n\nThe Estimote SDK for Android is a library that allows interaction with Estimote beacons \u0026 stickers. The SDK system works on Android 4.3 or above and requires device with Bluetooth Low Energy (SDK\u0027s min Android SDK version is 9).\n\nIt allows for:\n\n - Beacon Ranging (scans beacons and optionally filters them by their properties)\n - Beacon Monitoring (monitors regions for those devices that have entered/exited a region)\n - Nearables (aka stickers) discovery\n - Eddystone scanning\n - Beacon characteristic reading and writing (proximity UUID, major \u0026 minor values, broadcasting power, advertising interval)ing beacons.\n","Version":"0.9.1.0","Summary":"Estimote SDK for Xamarin.Android to actively scan for Bluetooth Beacons, Nearables, and Eddystones.","QuickStart":"The system requirements are Android 4.3 and Bluetooth Low Energy.\n\n## Quick start for beacon ranging\n\nThe `BeaconManager` class is the primary means of interating with Estimotes. Create an instance of this class, and use the `.Connect` method, passing it `BeaconManager.IServiceReadyCallback` object. When the BeaconManager is up and running, it will notify clients by call `BeaconManager.IServiceReadyCallback.OnServiceReady()`. At this point the client can start ranging or monitoring for the Estimotes.\n\nThe following code shows an example of how to use the `BeaconManager`.\n\n```csharp\nusing Estimote;\n\nnamespace Estimotes.Droid\n{\n    [Activity(Label = \"Notify Demo\")]\t\n    public class NotifyDemoActivity : Activity, BeaconManager.IServiceReadyCallback\n    {\n        static readonly int NOTIFICATION_ID = 123321;\n\n        BeaconManager _beaconManager;\n        Region _region;\n\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n            SetContentView(Resource.Layout.notify_demo);\n\n            _region = this.GetBeaconAndRegion().Item2;\n            _beaconManager = new BeaconManager(this);\n\n            // Default values are 5s of scanning and 25s of waiting time to save CPU cycles.\n            // In order for this demo to be more responsive and immediate we lower down those values.\n            _beaconManager.SetBackgroundScanPeriod(TimeUnit.Seconds.ToMillis(1), 0);\n            _beaconManager.EnteredRegion += (sender, e) =\u003e {\n                // Do something as the device has entered in region for the Estimote.\n            };\n            _beaconManager.ExitedRegion += (sender, e) =\u003e {\n                // Do something as the device has left the region for the Estimote.            \n            };\n        \n        }\n\n        protected override void OnResume()\n        {\n            base.OnResume();\n            _beaconManager.Connect(this);\n        }\n\n        public void OnServiceReady()\n        {\n            // This method is called when BeaconManager is up and running.\n            _beaconManager.StartMonitoring(_region);\n        }\n\n        protected override void OnDestroy()\n        {\n        \t// Make sure we disconnect from the Estimote.\n            _beaconManager.Disconnect();\n            base.OnDestroy();\n        }\n    }\n}\n\n```\n\n\n\n## Quick start for nearable discovery\n```csharp\npublic class NearableActivity : Activity, BeaconManager.IServiceReadyCallback\n{\n\tBeaconManager beaconManager;\n    string scanId;\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n\n        // Create beacon manager\n        beaconManager = new BeaconManager(this);\n\n        // Wearables will be triggered when nearables are found\n        beaconManager.Nearable += (sender, e) =\u003e \n            {\n                ActionBar.Subtitle = string.Format(\"Found {0} nearables.\", e.Nearables.Count;\n            };\n\n        //Connect to beacon manager to start scanning\n\t   beaconManager.Connect(this);\n    }\n\n    protected override void OnStop()\n    {\n        base.OnStop();\n        if (!isScanning)\n            return;\n        \n        isScanning = false;\n        beaconManager.StopNearableDiscovery(scanId);\n    }\n\n    public void OnServiceReady()\n    {\n        isScanning = true;\n        scanId = beaconManager.StartNearableDiscovery();\n    }\n\n    protected override void OnDestroy()\n    {\n        base.OnDestroy();\n        beaconManager.Disconnect();\n    }\n}\n```\n\n## Quick start for Eddystone\n\n[Eddystone](https://developers.google.com/beacons) is an open protocol BLE protocol from Google. Estimote Beacons can broadcast the Eddystone packet.\n\nWith Estimote SDK you can:\n - find nearby Eddystone beacons \n - configure Eddystone ralated properties:\n   - URL property of `Eddystone-URL` \n   - namespace \u0026 instance properties of `Eddystone-UID` \n - configure broadcasting scheme of beacon to `Estimote Default`, `Eddystone-UID` or `Eddystone-URL`\n\nNote that you can play with Estimote Beacons broadcasting the Eddystone packet and change their configuration via [Estimote app on Google Play](https://play.google.com/store/apps/details?id=com.estimote.apps.main).\n\nIn order to start playing with Eddystone you need to update firmware of your existing Estimote beacons to `3.1.1`. Easiest way is through [Estimote app on Google Play](https://play.google.com/store/apps/details?id=com.estimote.apps.main). Than you can change broadcasting scheme on your beacon to Eddystone-URL or Eddystone-UID.\n\nFollowing code snippet shows you how you can start discovering nearby Estimote beacons broadcasting Eddystone packet:\n\n```csharp\npublic class NearableActivity : Activity, BeaconManager.IServiceReadyCallback\n{\n    BeaconManager beaconManager;\n    string scanId;\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n\n        // Create beacon manager\n        beaconManager = new BeaconManager(this);\n\n        // Wearables will be triggered when nearables are found\n        beaconManager.Eddystone += (sender, e) =\u003e \n            {\n                ActionBar.Subtitle = string.Format(\"Found {0} eddystones.\", e.Eddystones.Count;\n            };\n\n        //Connect to beacon manager to start scanning\n       beaconManager.Connect(this);\n    }\n\n    protected override void OnStop()\n    {\n        base.OnStop();\n        if (!isScanning)\n            return;\n        \n        isScanning = false;\n        beaconManager.StopEddystoneScanning(scanId);\n    }\n\n    public void OnServiceReady()\n    {\n        isScanning = true;\n        scanId = beaconManager.StartEddystoneScanning();\n    }\n\n    protected override void OnDestroy()\n    {\n        base.OnDestroy();\n        beaconManager.Disconnect();\n    }\n}\n\n```\n\n","Hash":"b91aed64cc5522991eee76f7d4509280","TargetPlatforms":["android"],"TrialHash":null}